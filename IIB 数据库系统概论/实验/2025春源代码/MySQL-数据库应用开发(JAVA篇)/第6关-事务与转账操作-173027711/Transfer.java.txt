import java.sql.*;
import java.util.Scanner;

public class Transfer {
    static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://127.0.0.1:3306/finance?allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF8&useSSL=false&serverTimezone=UTC";
    static final String USER = "root";
    static final String PASS = "123123";

    /**
     * 转账操作
     *
     * @param connection 数据库连接对象
     * @param sourceCard 转出账号
     * @param destCard 转入账号
     * @param amount  转账金额
     * @return boolean
     *   true  - 转账成功
     *   false - 转账失败
     */
    public static boolean transferBalance(Connection connection,
                             String sourceCard,
                             String destCard, 
                             double amount) {
        PreparedStatement sourceCheckStmt = null;
        PreparedStatement destCheckStmt = null;
        PreparedStatement updateSourceStmt = null;
        PreparedStatement updateDestStmt = null;
        ResultSet sourceRs = null;
        ResultSet destRs = null;
        
        try {
            // 开启事务
            connection.setAutoCommit(false);
            
            // 1. 检查转出账户是否存在且不是信用卡
            String sourceCheckSql = "SELECT b_type, b_balance FROM bank_card WHERE b_number = ? FOR UPDATE";
            sourceCheckStmt = connection.prepareStatement(sourceCheckSql);
            sourceCheckStmt.setString(1, sourceCard);
            sourceRs = sourceCheckStmt.executeQuery();
            
            if (!sourceRs.next()) {
                return false; // 转出账户不存在
            }
            
            String sourceType = sourceRs.getString("b_type");
            double sourceBalance = sourceRs.getDouble("b_balance");
            
            if ("信用卡".equals(sourceType)) {
                return false; // 转出账户是信用卡
            }
            
            // 2. 检查转入账户是否存在
            String destCheckSql = "SELECT b_type, b_balance FROM bank_card WHERE b_number = ? FOR UPDATE";
            destCheckStmt = connection.prepareStatement(destCheckSql);
            destCheckStmt.setString(1, destCard);
            destRs = destCheckStmt.executeQuery();
            
            if (!destRs.next()) {
                return false; // 转入账户不存在
            }
            
            String destType = destRs.getString("b_type");
            double destBalance = destRs.getDouble("b_balance");
            
            // 3. 检查转出账户余额是否充足
            if (sourceBalance < amount) {
                return false; // 余额不足
            }
            
            // 4. 执行转账
            // 更新转出账户（扣款）
            String updateSourceSql = "UPDATE bank_card SET b_balance = b_balance - ? WHERE b_number = ?";
            updateSourceStmt = connection.prepareStatement(updateSourceSql);
            updateSourceStmt.setDouble(1, amount);
            updateSourceStmt.setString(2, sourceCard);
            updateSourceStmt.executeUpdate();
            
            // 更新转入账户
            String updateDestSql;
            if ("信用卡".equals(destType)) {
                // 信用卡还款：先补齐透支款项，剩余金额转为存款
                if (destBalance > 0) {
                    // 有透支，先还清欠款
                    double remainingAmount = destBalance - amount;
                    if (remainingAmount < 0) {
                        // 还清欠款后还有余额，转为存款
                        updateDestSql = "UPDATE bank_card SET b_balance = ? WHERE b_number = ?";
                        updateDestStmt = connection.prepareStatement(updateDestSql);
                        updateDestStmt.setDouble(1, remainingAmount);
                        updateDestStmt.setString(2, destCard);
                    } else {
                        // 只还部分欠款
                        updateDestSql = "UPDATE bank_card SET b_balance = b_balance - ? WHERE b_number = ?";
                        updateDestStmt = connection.prepareStatement(updateDestSql);
                        updateDestStmt.setDouble(1, amount);
                        updateDestStmt.setString(2, destCard);
                    }
                } else {
                    // 无透支，直接转为存款
                    updateDestSql = "UPDATE bank_card SET b_balance = b_balance - ? WHERE b_number = ?";
                    updateDestStmt = connection.prepareStatement(updateDestSql);
                    updateDestStmt.setDouble(1, amount);
                    updateDestStmt.setString(2, destCard);
                }
            } else {
                // 普通转账
                updateDestSql = "UPDATE bank_card SET b_balance = b_balance + ? WHERE b_number = ?";
                updateDestStmt = connection.prepareStatement(updateDestSql);
                updateDestStmt.setDouble(1, amount);
                updateDestStmt.setString(2, destCard);
            }
            updateDestStmt.executeUpdate();
            
            // 提交事务
            connection.commit();
            return true;
            
        } catch (SQLException e) {
            try {
                // 回滚事务
                connection.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            return false;
        } finally {
            // 恢复自动提交
            try {
                connection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            // 关闭资源
            try {
                if (sourceRs != null) sourceRs.close();
                if (destRs != null) destRs.close();
                if (sourceCheckStmt != null) sourceCheckStmt.close();
                if (destCheckStmt != null) destCheckStmt.close();
                if (updateSourceStmt != null) updateSourceStmt.close();
                if (updateDestStmt != null) updateDestStmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // 不要修改main() 
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        Class.forName(JDBC_DRIVER);

        Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);

        while(sc.hasNext()) {
            String input = sc.nextLine();
            if(input.equals(""))
                break;

            String[] commands = input.split(" ");
            if(commands.length == 0)
                break;
            String payerCard = commands[0];
            String payeeCard = commands[1];
            double amount = Double.parseDouble(commands[2]);
            if (transferBalance(connection, payerCard, payeeCard, amount)) {
                System.out.println("转账成功。");
            } else {
                System.out.println("转账失败,请核对卡号，卡类型及卡余额!");
            }
        }
    }
}
